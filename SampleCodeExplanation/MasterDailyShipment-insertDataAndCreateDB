//Comment : 한국어
//버튼에 연계된 기능들을 이렇게 정리해두고 'clickSortOrders'를 assign Script 해주시면 됩니다.
function clickSortOrders(){
  clearSortedList();
  sortOrderDataAM();
  sortOrderDataPM();
}

function sortOrderDataAM() {
//특정 페이지를 읽어오는 코드
var ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('dev_AM PM PICK LIST');

//1. Select data from Orderlist 
//sw num - am
//위치 데이터를 읽어올 때는 좌표 읽어오듯이 하면 좋음.
//ss.getLastRow() <- 해당 sheet의 마지막 값을 읽어오는 코드
var sn_range = ss.getRange('A3:A' + ss.getLastRow()); 
var sn_data = sn_range.getValues(); 
var sn_column = sn_data.map(function(row) { return row[0]; });

//qty - am
var q_range = ss.getRange('B3:B' + ss.getLastRow()); 
var q_data = q_range.getValues(); 
var q_column = q_data.map(function(row) { return row[0]; });

//sku_lv - am
var sku_range = ss.getRange('C3:C' + ss.getLastRow()); 
var sku_data = sku_range.getValues(); 
var sku_column = sku_data.map(function(row) { return row[0]; });

//DB랑 connect 하려면 projectId를 꼭 parameter로 전달해주셔야 합니다.
var projectId = 'avlgear-erp-v-1-0';
var datasetId = 'avlgear_erp';

//이건 Merge 혹은 다수의 list를 읽어와야 하는 코드이기 때문에 table을 선언하여 읽어오고 join을 통해 출력.
const request = {
query : "CREATE or REPLACE Table  " + projectId + ".avlgear_erp.MDSAMList (sw_num STRING, qty INTEGER, SKU STRING, rownum INTEGER );",
useLegacySql: false
};

//여기가 BigQuery DB에 접근하는 코드
let queryResults = BigQuery.Jobs.query(request, projectId);


//2. Upload Order Input log table
var insert_code = "INSERT INTO " + projectId + "." + datasetId + ".MDSAMList (sw_num, qty, SKU, rownum) VALUES "
for(var i = 0; i < parseInt(sn_column.length); i++){
if(sku_column[i].length != 0){
    insert_code += "('" + sn_column[i] + "', "+ q_column[i] + ", '"  +  sku_column[i] + "', " + i + "),";
}
} 
insert_code = insert_code.slice(0, -1) + ";";

Logger.log("insert_code : " + insert_code);


const request_insert = {
    query : insert_code,
    useLegacySql: false
  };
let queryResults_insert = BigQuery.Jobs.query(request_insert, projectId);


var selectDistinctOrder = "SELECT distinct sw_num, qty, CASE " +
                        "WHEN SKU LIKE '%-FOL' THEN REPLACE(SKU, '-FOL', '') " +
                        "WHEN SKU LIKE '%-FOL1' THEN REPLACE(SKU, '-FOL1', '') " +
                        "WHEN SKU LIKE '%-FOL2' THEN REPLACE(SKU, '-FOL2', '') " +
                        "WHEN SKU LIKE '%-FOL3' THEN REPLACE(SKU, '-FOL3', '') " +
                        "WHEN SKU LIKE '%-FBA' THEN REPLACE(SKU, '-FBA', '') " +
                        "ELSE SKU END as sku_pick FROM `avlgear-erp-v-1-0.avlgear_erp.MDSAMList` Order by sku_pick;";
const request_selectDorder = {
    query : selectDistinctOrder,
    useLegacySql: false
  };
let queryResults_selectDOrder = BigQuery.Jobs.query(request_selectDorder, projectId);


//이렇게 데이터 테이블 형태로 이차원 배열로 바꿔서 출력하기 쉽게 만듭니다.
var resultCount = queryResults_selectDOrder.getTotalRows();
var resultSchema = queryResults_selectDOrder.getSchema();
var resultValues = new Array(resultCount);
var tableRows = queryResults_selectDOrder.getRows();

if(resultCount > 0){
// Iterate through query results
for (var i = 0; i < tableRows.length; i++) {
  var cols = tableRows[i].getF();
  resultValues[i] = new Array(cols.length);
  // For each column, add values to the result array
  for (var j = 0; j < cols.length; j++) {
    resultValues[i][j] = cols[j].getV();
  }
  ss.getRange("I" + (i+3)).setValue(resultValues[i][0]);
  ss.getRange("J" + (i+3)).setValue(resultValues[i][1]);
  ss.getRange("K" + (i+3)).setValue(resultValues[i][2]);

}
}


}

